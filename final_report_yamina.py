# -*- coding: utf-8 -*-
"""Final_report_Yamina.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u2uuKj_N3dL-JXWX4O5MSVhmqp8wK9J4
"""

#From work guidelines
from IPython.display import HTML
HTML('''<script>
code_show=true;
function code_toggle() {
if (code_show){
$('div.input').hide();
} else {
$('div.input').show();
}
code_show = !code_show
}
$( document ).ready(code_toggle);
</script>
<form action="javascript:code_toggle()"><input type="submit" value="Click here to toggle on/off the raw
code."></form>''')

<div dir="rtl"> 
דו"ח לנציגי מפלגת ימינה.
<br>
הוכח על ידי קטרינה גובר ואור בן דוד
<br>
342430584
<br>
207438573
<br>

</div>

import numpy as np  # a module for working with numerical array 
import pandas as pd  # a module for working with data- frames
import statsmodels.api as sm
import math
from numpy import random
import statistics
import io
from matplotlib import pyplot as plt
import matplotlib.patches as mpatches
from sklearn.decomposition import PCA
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn import preprocessing
import matplotlib.cm as cm
from scipy.optimize import nnls
import plotly.graph_objects as go
import plotly.offline

from google.colab import drive
drive.mount('/content/drive')

from google.colab import files
uploaded = files.upload()

# Loading elections 2020 elections data:
df_2020_raw_city = pd.read_csv(io.BytesIO(uploaded['votes per city 2020.csv']),  encoding = 'iso-8859-8', index_col='שם ישוב')
df_2020_raw_city = df_2020_raw_city.drop("מעטפות חיצוניות", axis=0)
df_2020_city = df_2020_raw_city.drop('סמל ועדה', axis=1) 
df_2020_city = df_2020_city[df_2020_city.columns[5:-1]] # remove unnecessary data

df_2020_raw_kal = pd.read_csv(io.BytesIO(uploaded['votes per ballot 2020.csv']),  encoding = 'iso-8859-8', index_col='שם ישוב')
df_2020_raw_kal = df_2020_raw_kal.drop("מעטפות חיצוניות", axis=0)
df_2020_kal = df_2020_raw_kal.drop('סמל ועדה', axis=1) 
df_2020_kal = df_2020_kal[df_2020_kal.columns[9:-1]] # removing unnecessary columns

# Loading elections 2019b elections data:
df_2019_raw_city = pd.read_csv(io.BytesIO(uploaded['votes per city 2019b.csv']),  encoding = 'iso-8859-8', index_col='שם ישוב')
df_2019_raw_city = df_2019_raw_city.drop("מעטפות חיצוניות", axis=0)
df_2019_city = df_2019_raw_city.drop('סמל ועדה', axis=1) #''
df_2019_city = df_2019_city[df_2019_city.columns[5:-1]] 

df_2019_raw_kal = pd.read_csv(io.BytesIO(uploaded['votes per ballot 2019b.csv']),  encoding = 'iso-8859-8', index_col='שם ישוב')
df_2019_raw_kal = df_2019_raw_kal.drop("מעטפות חיצוניות", axis=0)
df_2019_raw_kal = df_2019_raw_kal.drop('נץ', 1)
df_2019_raw_kal = df_2019_raw_kal.rename(columns={'כף': 'נץ'})
df_2019_kal = df_2019_raw_kal.drop('סמל ועדה', axis=1) 
df_2019_kal = df_2019_kal[df_2019_kal.columns[9:-1]] # removing unnessary data

# Loading elections 2019a elections data:
df_2019a_raw_city = pd.read_csv(io.BytesIO(uploaded['votes per city 2019a.csv']),  encoding = 'iso-8859-8', index_col='שם ישוב')
df_2019a_raw_city = df_2019a_raw_city.drop("מעטפות חיצוניות", axis=0)
df_2019a_city = df_2019a_raw_city[df_2019a_raw_city.columns[5:-1]] 

df_2019a_raw_kal = pd.read_csv(io.BytesIO(uploaded['votes per ballot 2019a.csv']),  encoding = 'iso-8859-8', index_col='שם ישוב')
df_2019a_raw_kal = df_2019a_raw_kal.drop("מעטפות חיצוניות", axis=0)
df_2019a_kal = df_2019a_raw_kal[df_2019a_raw_kal.columns[6:]]

"""<div dir="rtl">
שאלה 1
<br>
במהלך השנים 2019-2020 התקיימו שלושה מערכות בחירות, הראשונה לכנסת ה-21 (מועד א׳) שנערכה במרץ 2019,השניה לכנסת ה-22 (מועד ב׳) שנערכה בספטמבר 2019 והשלישית לכנסת ה-23 במועד מרץ 2020. הקבצי נתונים בהם השתמשנו הם: נתוני הבחירות לפי ערים ולפי קלפיות עבור כל אחד ממועדי הבחירות. קבצים אלו מכילים בין היתר את נתוני הקולות הכשרים , נתוני הקולות הפסולים נתוני בעלי זכות הבחירה ועוד.. טרם ניתוח הקבצים ניפינו את עמודת המעטפות החיצוניות והמרנו שמות של מפלגות אשר שינו את שמם במהלך מועדי הבחירות כדי לקבל ניתוח מהימן יותר. 
<br>
קובץ נתונים נוסף נלקח מהלשכה המרכזית לסטטיסטיקה ,קובץ זה מכיל נתוני eco   עבור הערים השונות בישראל למשל: מצב כלכלי. בנוסף, נעזרנו לניתוח בקובץ המדרג את הערים על פי מדד פריפריאליות. ננתח את הכוח של המפלגה לפי מעמד כלכלי ופריפריאלי לכל עיר או קלפי. בחישוב ה PCA  הסרנו את נתוני הקולות הפסולים ובניתוח המקדים איחדנו את המפלגות ״טב״ ו-״נ״ במועד אפריל 2019 מפני שטרם הוקמה המפלגה ״טב״ ,במערכת הבחירות החל מספטמבר 2019 ״עוצמה יהודית״ ו״טב״ רצו בנפרד לראשונה, ולכן נבדוק בניתוח שלנו את מעברי הקולות בין מועדי ב׳ לג׳.
 </div>

<div dir="rtl">
שאלה 2
<br>
קודם בחירות מועד א׳, אפריל 2019 נפתלי בנט כיהן כיושב ראש הבית היהודי, הוא פרש ממפלגה זו והקים יחד עם איילת שקד מפלגה חדשה ששמה ״הימין החדש״ שרצה תחת הפתק ״נ״, מה שנותר ממפלגת הבית היהודי צורף למפלגה אחרת ״עוצמה יהודית״ שנקראו איחוד מפלגות ימין תחת האות ״טב״. 
<br>
בבחירות מועד ב׳, ספטמבר 2019 לאחר שנפתלי בנט לא הצליח להגיע לאחוז החסימה במועד א׳, נפתלי בנט חזר למפלגה של הבית היהודי והתמודד לבחירות תחת ימינה באותיות ״טב״, במקביל עוצמה יהודית אשר רצה בנפרד בבחירות מועד א׳ רצה הפעם בנפרד תחת הפתק ״כף״. בבחירות האחרונות במועד מרץ 2020 , ימינה הייתה שוב בראשות נפתלי בנט ועוצמה יהודית רצה בנפרד בדומה למועד הקודם לו אך כעת תחת הפתק ״נץ״. בבחירות הקרובות הצפויות להתקיים במרץ 2021 בנט צפוי להתמודד לראשות הממשלה.
<br>
נרצה להתייחס לשינויים הבאים בניתוח שלנו, ראשית נתייחס לכך שימינה הוקמה רק במועד ב׳ 2019 ולכן על מנת לבצע ניתוח נכון והשוואתי נצטרך לחבר בין הקולות של נ׳ ו-״טב״, שנית בין מועד ב׳ 2019 למועד 2020 מפלגת עוצמה יהודית שינתה את פתקה מ-״כף״ ל-״נץ״ אך ללא כל שינוי מהותי נוסף, אנו נשנה בין שמות הפתקים בטבלאות שלנו כדי ליצור אחידות.  בנוסף, נרצה לנתח בהמשך את ההתפצלויות והאחודים בין המפלגות לאורך שלושת מערכות הבחירות ואת מעברי הקולות ביניהן על מנת להבין את המניעים, ההצלחות והכישלונות .
 </div>

<div dir="rtl">
שאלה 3:
<br>
בשאלה זו בדומה למעבדה 2 הצגנו את אחוזי הצבעה קודם התיקון ולאחריה, ביצענו את התיקון לכלל המפלגות הרלוונטיות לט״ב, עם הפירוק ולאחריה לצורך ניתוח מעניין. במועד א׳ 2019 טב ו-נ׳ התמודדו בנפרד ,לשתיהן אחוזי הצבעה די דומים בפער של 0.051 אחוזים לטובת מפלגת טב׳. גם עבור מפלגת נ׳ וגם עבור טב׳ התיקון שביצענו כלומר אחוזי ההצבעה הפוטנציאלים אינו מגדיל את כוחן של המפלגות ואף מחליש אותן. במועד ב׳ בבחירות 2019 הוקמה מפלגת ימינה, התמודדו טב וכף (נץ בשמם העדכני) בנפרד, מפלגת ימינה מקבלת 0.0567 אחוזי הצבעה והתיקון אינו מחזק אותה בעוד מפלגת נץ זוכה רק ל0.0185 אחוזי הצבעה בלבד, גם עבור מפלגת נץ התיקון לא מסייע להגדיל את כוחה. בבחירות האחרונות ב2020 טב׳ ונ׳ התמודדו שוב בנפרד, טב׳ נחלשת מהבחירות הקודמות ב0.0066 אחוז והתיקון לא מסייע להגדיל את כוחה, נץ לאחר שינוי פתקה מ-״כף״ גם כן נחלשת והתיקון לא מגדיל את כוחה. כלומר מספר הבוחרים בפוטנציה לא היה גדל.
 </div>
"""

def party_percentage(party, df):  #Using the functions we saw in class, calculates the turnout (relatively)
  df_copy = df.copy(deep = True)
  return df_copy[party].sum()/df_copy["כשרים"].sum()

def party_percentage_fix(party, df, df_full): #Carrying out the fix to the turnout
  df_copy = df.copy(deep = True)
  df_copy_full = df_full.copy(deep = True)
  v = df_copy_full['כשרים'].div(df_copy_full['בזב']) #If all eligible voters were to vote
  df_fix = df_copy.div(v, axis = "rows")
  return df_fix[party].sum()/df_copy_full["בזב"].sum()

width = 0.3  #plot all of the parties that split and came back according the three last elections
fig , ax_plots =  plt.subplots(2,6)
fig.set_figheight(10)
fig.set_figwidth(35)
fig.suptitle("אחוזי הצבעה ותיקונם בשלושת מועדי הבחירות"[::-1],y=1.05,size = 50)

#tb in 2019a, by city
tab_2019a = party_percentage("טב", df_2019a_raw_city)
tab_2019a_fix = party_percentage_fix("טב", df_2019a_city,df_2019a_raw_city)
ax_00 = ax_plots[0,0].bar([0, 1], [tab_2019a, tab_2019a_fix ], width=0.7,color='mediumaquamarine')
ax_plots[0,0].set_ylabel('Votes Percent')
ax_plots[0,0].set_xlabel('')
ax_plots[0,0].set_title("2019 MOED A" + "אחוז הצבעה למפלגת טב לפי ערים ב-"[::-1])
ax_plots[0,0].set_xticks(np.arange(2))
ax_plots[0,0].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[0,0].text(ax_00[0].get_x() + ax_00[0].get_width()/2, ax_00[0].get_height()/2, str(round(ax_00[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[0,0].text(ax_00[1].get_x() + ax_00[1].get_width()/2, ax_00[1].get_height()/2, str(round(ax_00[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center', )

#tb in 2019a, by ballot
tab_2019a_kal = party_percentage("טב", df_2019a_raw_kal)
tab_2019a_kal_fix = party_percentage_fix("טב", df_2019a_kal,df_2019a_raw_kal)
ax_01 = ax_plots[0,1].bar([0, 1], [tab_2019a_kal, tab_2019a_kal_fix], width=0.7,color='mediumaquamarine')
ax_plots[0,1].set_ylabel('Votes Percent')
ax_plots[0,1].set_xlabel('')
ax_plots[0,1].set_title("2019 MOED A" + "אחוז הצבעה למפלגת טב לפי קלפיות ב-"[::-1])
ax_plots[0,1].set_xticks(np.arange(2))
ax_plots[0,1].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[0,1].text(ax_01[0].get_x() + ax_01[0].get_width()/2, ax_01[0].get_height()/2, str(round(ax_01[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[0,1].text(ax_01[1].get_x() + ax_01[1].get_width()/2, ax_01[1].get_height()/2, str(round(ax_01[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center')

#n in 2019a, by city
n_2019a = party_percentage("נ", df_2019a_raw_city)
n_2019a_fix = party_percentage_fix("נ", df_2019a_city,df_2019a_raw_city)
ax_02 = ax_plots[0,2].bar([0, 1], [n_2019a, n_2019a_fix], width=0.7, color='aquamarine')
ax_plots[0,2].set_ylabel('Votes Percent')
ax_plots[0,2].set_xlabel('')
ax_plots[0,2].set_title("2019 MOED A" + "אחוז הצבעה למפלגת נ לפי ערים ב-"[::-1])
ax_plots[0,2].set_xticks(np.arange(2))
ax_plots[0,2].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[0,2].text(ax_02[0].get_x() + ax_02[0].get_width()/2, ax_02[0].get_height()/2, str(round(ax_02[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[0,2].text(ax_02[1].get_x() + ax_02[1].get_width()/2, ax_02[1].get_height()/2, str(round(ax_02[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center')

#n in 2019a, by ballots
n_2019a_ballot = party_percentage("נ", df_2019a_raw_kal)
n_2019a_ballot_fix = party_percentage_fix("נ", df_2019a_kal,df_2019a_raw_kal)
ax_03 = ax_plots[0,3].bar([0, 1], [n_2019a_ballot, n_2019a_ballot_fix], width=0.7,color='aquamarine')
ax_plots[0,3].set_ylabel('Votes Percent')
ax_plots[0,3].set_xlabel('')
ax_plots[0,3].set_title("2019 MOED A" + "אחוז הצבעה למפלגת נ לפי קלפיות ב-"[::-1])
ax_plots[0,3].set_xticks(np.arange(2))
ax_plots[0,3].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[0,3].text(ax_03[0].get_x() + ax_03[0].get_width()/2, ax_03[0].get_height()/2, str(round(ax_03[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[0,3].text(ax_03[1].get_x() + ax_03[1].get_width()/2, ax_03[1].get_height()/2, str(round(ax_03[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center')

#tb in 2019b, by city
tab_2019b = party_percentage("טב", df_2019_raw_city)
tab_2019_fix = party_percentage_fix("טב", df_2019_city,df_2019_raw_city)
ax_04 = ax_plots[0,4].bar([0, 1], [tab_2019b , tab_2019_fix], width=0.7, color='turquoise')
ax_plots[0,4].set_ylabel('Votes Percent')
ax_plots[0,4].set_xlabel('')
ax_plots[0,4].set_title("2019 MOED B" + "אחוז הצבעה למפלגת טב לפי ערים ב-"[::-1])
ax_plots[0,4].set_xticks(np.arange(2))
ax_plots[0,4].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[0,4].text(ax_04[0].get_x() + ax_04[0].get_width()/2, ax_04[0].get_height()/2, str(round(ax_04[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[0,4].text(ax_04[1].get_x() + ax_04[1].get_width()/2, ax_04[1].get_height()/2, str(round(ax_04[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center')
#tb in 2019b, by ballots
tab_2019b_ballot = party_percentage("טב", df_2019_raw_kal)
tab_2019b_ballot_fix = party_percentage_fix("טב", df_2019_kal,df_2019_raw_kal)
ax_05 = ax_plots[0,5].bar([0, 1], [tab_2019b_ballot, tab_2019b_ballot_fix], width=0.7,color='turquoise')
ax_plots[0,5].set_ylabel('Votes Percent')
ax_plots[0,5].set_xlabel('')
ax_plots[0,5].set_title("2019 MOED B" + "אחוז הצבעה למפלגת טב לפי קלפיות ב-"[::-1])
ax_plots[0,5].set_xticks(np.arange(2))
ax_plots[0,5].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[0,5].text(ax_05[0].get_x() + ax_05[0].get_width()/2, ax_05[0].get_height()/2, str(round(ax_05[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[0,5].text(ax_05[1].get_x() + ax_05[1].get_width()/2, ax_05[1].get_height()/2, str(round(ax_05[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center')
#netz in 2019b, by city
netz_2019b = party_percentage("כף", df_2019_raw_city)
netz_2019b_fix = party_percentage_fix("כף", df_2019_city,df_2019_raw_city)
ax_10 = ax_plots[1,0].bar([0, 1], [netz_2019b, netz_2019b_fix], width=0.7, color='cyan')
ax_plots[1,0].set_ylabel('Votes Percent')
ax_plots[1,0].set_xlabel('')
ax_plots[1,0].set_title("2019 MOED B" + "אחוז הצבעה למפלגת נץ לפי ערים ב-"[::-1])
ax_plots[1,0].set_xticks(np.arange(2))
ax_plots[1,0].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[1,0].text(ax_10[0].get_x() + ax_10[0].get_width()/2, ax_10[0].get_height()/2, str(round(ax_10[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[1,0].text(ax_10[1].get_x() + ax_10[1].get_width()/2, ax_01[1].get_height()/2, str(round(ax_10[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center')
#netz in 2019b, by ballots
netz_2019b_kal = party_percentage("נץ", df_2019_raw_kal)
netz_2019b_fix = party_percentage_fix("נץ", df_2019_kal,df_2019_raw_kal)
ax_11 = ax_plots[1,1].bar([0, 1], [netz_2019b_kal, netz_2019b_fix], width=0.7,color='cyan')
ax_plots[1,1].set_ylabel('Votes Percent')
ax_plots[1,1].set_xlabel('')
ax_plots[1,1].set_title("2019 MOED B" + "אחוז הצבעה למפלגת נץ לפי קלפיות ב-"[::-1])
ax_plots[1,1].set_xticks(np.arange(2))
ax_plots[1,1].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[1,1].text(ax_11[0].get_x() + ax_11[0].get_width()/2, ax_11[0].get_height()/2, str(round(ax_11[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[1,1].text(ax_11[1].get_x() + ax_11[1].get_width()/2, ax_11[1].get_height()/2, str(round(ax_11[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center')
#tb in 2020, by city
tab_2020 = party_percentage("טב", df_2020_raw_city)
tab_2020_fix = party_percentage_fix("טב", df_2020_kal,df_2020_raw_kal)
ax_12 = ax_plots[1,2].bar([0, 1], [tab_2020,tab_2020_fix], width=0.7, color='lightcyan')
ax_plots[1,2].set_ylabel('Votes Percent')
ax_plots[1,2].set_xlabel('')
ax_plots[1,2].set_title("2020" + "אחוז הצבעה למפלגת טב לפי ערים ב-"[::-1])
ax_plots[1,2].set_xticks(np.arange(2))
ax_plots[1,2].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[1,2].text(ax_12[0].get_x() + ax_12[0].get_width()/2, ax_12[0].get_height()/2, str(round(ax_12[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[1,2].text(ax_12[1].get_x() + ax_12[1].get_width()/2, ax_12[1].get_height()/2, str(round(ax_12[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center')
#tb in 2020, by ballots
tab_2020_ballot = party_percentage("טב", df_2020_raw_kal)
tab_2020_ballot_fix = party_percentage_fix("טב", df_2020_kal,df_2020_raw_kal)
ax_13 = ax_plots[1,3].bar([0, 1], [tab_2020_ballot, tab_2020_ballot_fix ], width=0.7, color='lightcyan')
ax_plots[1,3].set_ylabel('Votes Percent')
ax_plots[1,3].set_xlabel('')
ax_plots[1,3].set_title("2020" + "אחוז הצבעה למפלגת טב לפי קלפיות ב-"[::-1])
ax_plots[1,3].set_xticks(np.arange(2))
ax_plots[1,3].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[1,3].text(ax_13[0].get_x() + ax_13[0].get_width()/2, ax_13[0].get_height()/2, str(round(ax_13[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[1,3].text(ax_13[1].get_x() + ax_13[1].get_width()/2, ax_13[1].get_height()/2, str(round(ax_13[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center')
#netz in 2020, by city
netz_2020 = party_percentage("נץ", df_2020_raw_city)
netz_2020_fix = party_percentage_fix("נץ", df_2020_city,df_2020_raw_city)
ax_14 = ax_plots[1,4].bar([0, 1], [netz_2020, netz_2020_fix], width=0.7, color='teal')
ax_plots[1,4].set_ylabel('Votes Percent')
ax_plots[1,4].set_xlabel('')
ax_plots[1,4].set_title("2020" + "אחוז הצבעה למפלגת נץ לפי ערים ב-"[::-1])
ax_plots[1,4].set_xticks(np.arange(2))
ax_plots[1,4].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[1,4].text(ax_14[0].get_x() + ax_14[0].get_width()/2, ax_14[0].get_height()/2, str(round(ax_14[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[1,4].text(ax_14[1].get_x() + ax_14[1].get_width()/2, ax_14[1].get_height()/2, str(round(ax_14[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center')

#netz in 2020, by ballot
netz_2020_ballot = party_percentage("נץ", df_2020_raw_kal)
netz_2020_ballot_fix = party_percentage_fix("נץ", df_2020_kal,df_2020_raw_kal)
ax_15 = ax_plots[1,5].bar([0, 1], [netz_2020_ballot, netz_2020_ballot_fix], width=0.7,color='teal')
ax_plots[1,5].set_ylabel('Votes percent')
ax_plots[1,5].set_xlabel('')
ax_plots[1,5].set_title("2020" + "אחוז הצבעה למפלגת נץ לפי קלפיות ב-"[::-1])
ax_plots[1,5].set_xticks(np.arange(2))
ax_plots[1,5].set_xticklabels(["Actual turnout", "After repair"])
ax_plots[1,5].text(ax_15[0].get_x() + ax_15[0].get_width()/2, ax_15[0].get_height()/2, str(round(ax_15[0].get_height(),4)),
          fontweight='bold', ha = 'center', va = 'center')
ax_plots[1,5].text(ax_15[1].get_x() + ax_15[1].get_width()/2, ax_15[1].get_height()/2, str(round(ax_15[1].get_height(),4)), 
          fontweight='bold',ha = 'center', va = 'center')

plt.show()

"""<div dir="rtl"> 
שאלה 4:
<br>
בשאלה זו נרצה לראות מגמה כללית בקרב הבוחרים של מפלגתנו ימינה, ראשית, בדקנו באילו ערים נמצאים מוקדי הכוח של מפלגתנו על ידי חישוב הקולות היחסיים של המפלגה מתוך כלל קולותיה הכשרים ודירוגם, נמצא שמוקדי הכוח שלה נמצאות בעיקר בירושלים, פתח תקווה ותל אביב אזורים אלו נחשבים מגוונים ברקע הישראלי, המשותף להן הוא קבוצה בחלקן גדולה בעיר בעלת רקע מסורתי-דתי בהתאם למצע ימינה ורצון לקידום ערכים אלו על שולחן הכנסת. בראש מוקדי החולש של מפלגת ימינה העיר רמת גן,  פתק תקווה, חיפה וראשון לציון . חולון וראשון לציון נחשבות לערים בעלות אופי יחסית חילוני. בערים אלו היינו ממליצות על השקעת תקציב רב יותר במערכות הבחירות.
<br>
בניתוח על פי אשכולות חברתיים-כלכליים נמצא שרוב מצביעיה של ימינה שוכנים באשכולות 7 ו-8 בעיקר  ובאשכולות 2-3 במעט, כלומר ניתן להסיק כי לרוב מצביעיה נמצאים בערך חברתי-כלכלי גבוה יחסית. ניתן להסיק כי על פי מדד הפריפריאליות מוקדי הכוח העיקריים של המפלגה הן באשכולות הגבוהים ,כלומר בישובים פריפריאליים עם מדרג גבוה ומעמד חברתי טוב גם כן.
</div>
"""



eco_data = pd.read_csv(io.BytesIO(uploaded['Eshkol_Hevrati_Calcali.csv']))
eco_data = eco_data.rename(columns = {'set_code':'סמל ישוב'}) #change the column name for the merge

vote_the_most = df_2020_raw_city.sort_values('כשרים', ascending = False).head(5)
vote_the_most_for_tb = vote_the_most["טב"] #take only the votes for tb
vote_the_most_for_tb = vote_the_most_for_tb.divide(vote_the_most_for_tb.sum()) #find the turnout for tb
vote_the_most_for_tb.index = [i[::-1] for i in vote_the_most_for_tb.index]


vote_the_most_for_tb = vote_the_most_for_tb.sort_values(ascending=False) #sort by value of turnout, deacreasing order
vote_the_most_for_tb.plot.bar(title = '   מוקדי הכוח של ימינה-  איזורים בעלי אחוזי ההצבעה הגבוהים ביותר למפלגה  '[::-1], rot=90,color='orange')

vote_most = df_2020_raw_city.sort_values('כשרים', ascending = False)
vote_for_tb = vote_most["טב"]
vote_for_tb = vote_for_tb.divide(vote_for_tb.sum())
vote_for_tb.index = [i[::-1] for i in vote_for_tb.index]
vote_for_tb = vote_the_most_for_tb.sort_values(ascending=True) #sort by value of turnout,increasing order
vote_less_tb= vote_for_tb.head(4)
vote_less_tb.plot.bar(title = 'נקודות החולש של ימינה- איזורים בעלי שיעורי ההצבעה הנמוכים ביותר למפלגה'[::-1], rot=90,color='orangered')

merge_elections_data = pd.merge(df_2019_raw_kal, df_2020_raw_kal, how='inner', on=['סמל ישוב','קלפי']) #merge by ballot and city code 2019b&2020
all_ballot = dict(zip(df_2019_raw_kal['סמל ישוב'],df_2019_raw_kal.index)) #saving the city code
merge_elections_data.index = [all_ballot[merge_elections_data["סמל ישוב"][i]] for i in range(len(merge_elections_data))]
merge_eco_elec= pd.merge(eco_data, df_2020_raw_city, how='inner', on='סמל ישוב') #merge the eco data with the elections data 


level_and_elec = merge_eco_elec.groupby(["eco_level"]).sum() 
eco_big_parties = level_and_elec.loc[:,["אמת", "ג", "ודעם","טב", "ל", "מחל","פה","שס"]] #the 8 big parties
eco_big_parties = level_and_elec.rename(columns = {'מחל':'הליכוד','פה':'כחול לבן','ודעם':'הרשימה המשותפת','ג':'יהדות התורה','אמת':'העבודה גשר מרצ','ל':'ישראל ביתנו','טב':'ימינה'})                            
level_tb= eco_big_parties["ימינה"]
level_tb_divide = level_tb.divide(level_tb.sum()) #calucate the voting percent by eco level
bar= level_tb_divide.plot.bar(title = 'אחוזי הצבעה לימינה לפי אשכולות חברתיים-כלכליים'[::-1], rot=0,color='purple')

def read_election_results(year, analysis):

  df_raw = pd.read_csv(io.BytesIO(uploaded['votes per ' + analysis + ' ' + year + '.csv']),
                      encoding='iso-8859-8', index_col='שם ישוב').sort_index()

  if year == '2019b' or year == '2020':
      df = df_raw.drop('סמל ועדה', axis=1)  # new column added in Sep 2019
  else:  # 2019a
      df = df_raw
  if year == '2020' and analysis == "city":
      df = df.drop('Unnamed: 37', axis=1)
  if year == '2020' and analysis == "ballot":
      df = df.drop('Unnamed: 41', axis=1)

  df = df[df.index != 'מעטפות חיצוניות']
  if analysis == 'city':
      first_col = 5
  else:  # ballot
      first_col = 9
  df = df[df.columns[first_col:]]  # removing "metadata" columns

  return df, df_raw

df_2020, df_2020_raw = read_election_results('2020', 'city')
df_2020_ballot, df_2020_raw_ballot = read_election_results('2020', 'ballot')
df_2019a_ballot, df_2019a_raw_ballot = read_election_results('2019a', 'ballot')
df_2019b_ballot, df_2019b_raw_ballot = read_election_results('2019b', 'ballot')

kay_ballots_2020=df_2020_raw_ballot.copy(deep=True)
kay_ballots_2020['percent'] = kay_ballots_2020['טב']/ hey_ballots_2020['כשרים']
names = df_2020.columns
pca = PCA(n_components=2)
merged_pca = kay_ballots_2020[names]

merged_pca_norm = merged_pca.T.div(merged_pca.T.sum()).T

color = kay_ballots_2020['percent']
X_pca_3 = pca.fit_transform(merged_pca_norm.T)  # Perform PCA transformation
fig, ax = plt.subplots(figsize=(12,8))
sc = ax.scatter(X_pca_3[:, 0], X_pca_3[:, 1], c = color, cmap='viridis', s = 2)
ax.set_title('PCA of the 2020 election- colors by Yamina')
ax.set_xlabel('PC1')
ax.set_ylabel('PC2')
plt.colorbar(sc)
plt.show()

kay_ballots_2020 = df_2020_raw_kal.copy(deep=True)
kay_ballots_2020['percent']=kay_ballots_2020['טב']/ kay_ballots_2020['כשרים']

names = df_2020.columns
pca = PCA(n_components=2)
merged_pca = kay_ballots_2020[names]

merged_pca_norm = merged_pca.T.div(merged_pca.T.sum()).T
color = kay_ballots_2020['percent']


X_pca_3 = pca.fit_transform(merged_pca_norm.T)  
fig, ax = plt.subplots(figsize=(12,8))
sc = ax.scatter(X_pca_3[:, 0], X_pca_3[:, 1], c = color, cmap='viridis', s = 2)
ax.set_title('PCA of the 2020 election- colors by Yamina')
ax.set_xlabel('PC1')
ax.set_ylabel('PC2')
plt.colorbar(sc)
plt.show()

kay_ballots_2019a=df_2019a_raw_ballot.copy(deep=True)
kay_ballots_2019a['אמת']=kay_ballots_2019a['אמת']+kay_ballots_2019a['נר']+kay_ballots_2019a['מרצ']
kay_ballots_2019a=kay_ballots_2019a.drop(['מרצ','נר'], 1)
kay_ballots_2019a['percent']=kay_ballots_2019a['טב']/kay_ballots_2019a['כשרים']
names_2019a=['מחל','פה','שס','ג','ום','אמת','ל','טב','כ','דעם']
merged_pca = kay_ballots_2019a[names_2019a]
pca = PCA(n_components=2)

merged_pca_norm = merged_pca.T.div(merged_pca.T.sum()).T
color = kay_ballots_2019a['percent']

X_pca_3 = pca.fit_transform(merged_pca_norm.T) 
fig, ax = plt.subplots(figsize=(12,8))
sc = ax.scatter(X_pca_3[:, 0], X_pca_3[:, 1], c = color, cmap='viridis', s = 2)
ax.set_title('PCA of the April 2019 election- colors by Yamina')
ax.set_xlabel('PC1')
ax.set_ylabel('PC2')
plt.colorbar(sc)
plt.show()

names_9 = df_2020_ballot.columns
df_19_ballots = df_2019b_ballot[df_2020_ballot.columns]
merged_inner = pd.merge(left=kay_ballots_2020, right=kay_ballots_2019b, left_on='שם ישוב', right_on='שם ישוב')
s1 = pd.merge(kay_ballots_2020, kay_ballots_2019b, how='inner', on=['קלפי','שם ישוב'])
s1[['percent_x','percent_y']]
s1['diff'] = (s1['percent_x'] - s1['percent_y'])

x = s1.iloc[:,10:40]
y = s1.iloc[:,51:82]
pca = PCA(n_components=2)
merged_pca = x

merged_pca_norm = merged_pca.T.div(merged_pca.T.sum()).T

color = s1['diff']
X_pca_3 = pca.fit_transform(merged_pca_norm.T)  
fig, ax = plt.subplots(figsize=(12,8))
sc = ax.scatter(X_pca_3[:, 0], X_pca_3[:, 1], c = color, cmap='inferno', s = 2)
ax.set_title('PCA  2020 election- colors by Yamina percentage differences from previous election')
ax.set_xlabel('PC1')
ax.set_ylabel('PC2')
plt.colorbar(sc)
plt.show()

kay_ballots_2019a.rename(columns={'מספר קלפי':'קלפי'}, inplace=True)
s2 = pd.merge(kay_ballots_2019b, kay_ballots_2019a, how='inner', on=['קלפי','שם ישוב'])
s2['diff'] = (s2['percent_x'] - s2['percent_y'])
x = s2.iloc[:,10:40]
pca = PCA(n_components=2)
merged_pca = x

merged_pca_norm = merged_pca.T.div(merged_pca.T.sum()).T

color = s2['diff']
X_pca_3 = pca.fit_transform(merged_pca_norm.T)
fig, ax = plt.subplots(figsize=(12,8))
sc = ax.scatter(X_pca_3[:, 0], X_pca_3[:, 1], c = color, cmap='PuOr', s = 2)
ax.set_title('PCA of september 2019 - colors by Yamina percentage differences from previous election')
ax.set_xlabel('PC1')
ax.set_ylabel('PC2')
plt.colorbar(sc)
plt.show()

def process_matrix(n_largest_19, n_largest_20, with_no_votes = False):
  
  # First - finding the n-th biggest parties in each election:
  big_2019 = parties_votes(df_2019_kal, 0).index[0:n_largest_19] # 2019 n biggest parties
  big_2020 = np.array(parties_votes(df_2020_kal, 0).index[0:n_largest_20]) # 2020 n biggest parties

  # Second - get onlt the shared ballots:

  #re-indexing and prepering data before joining-
  df_2019_index = df_2019_raw_kal.drop('ברזל', axis = 1).reset_index()
  df_2019_index.columns = [n + '- 2019' for n in df_2019_index]
  df_2019_index['ברזל'] = np.array(df_2019_raw_kal['ברזל'])
  df_2020_index = df_2020_raw_kal.reset_index()

  # join the two election dataframes to find the shared ballots-
  index_match = df_2019_index.set_index('ברזל').join(df_2020_index.set_index('ברזל'), how = 'inner')
  index_match = index_match.set_index('שם ישוב')

  # separating the joined data to 2 
  ballot_2020 = index_match[big_2020]
  ballot_2019 = index_match[[n + '- 2019' for n in big_2019]]
  ballot_2019.columns = big_2019

  # adding the "no-voted" party:
  if(with_no_votes):
        ballot_2020.insert(0, 'לא הצביעו', index_match['בזב'] - index_match['כשרים'], True)
        ballot_2019.insert(0, 'לא הצביעו', index_match['בזב- 2019'] - index_match['כשרים- 2019'], True)

  return(ballot_2019, ballot_2020)

def parties_votes(df, thresh):
    par = df.sum().div(df.sum().sum()).sort_values(ascending=False)
    return par[par > thresh]

n_a, n_b = process_matrix(10, 9)
parties_2019 = n_a.columns
parties_2020 = n_b.columns
#creating matrix of votes
n_a = n_a.values
n_b = n_b.values
M = np.linalg.pinv(n_a.T @ n_a) @n_a.T @ n_b 
M = pd.DataFrame(M)
M.columns = [x[::-1] for x in parties_2020]
M.index = [x[::-1] for x in parties_2019]

fig, ax = plt.subplots(figsize = (12, 7))
sns.heatmap(M, linewidths=0.30, annot=True,cmap="Blues")
plt.title('Changes in voting preferences between 2020 - 2019', fontweight="bold", fontsize=20)
plt.xlabel('Parties 2020', fontsize=14)
plt.ylabel('Parties 2019', fontsize=14)

M_out = M.iloc[4:7]
fig, ax = plt.subplots(figsize = (12, 7))
sns.heatmap(M_out, linewidths=0.30, annot=True,cmap="Blues")
plt.title('Changes in voting preferences between 2020 - 2019', fontweight="bold", fontsize=20)
plt.xlabel('Parties 2020', fontsize=14)
plt.ylabel('Parties 2019', fontsize=14)

M_in = M.iloc[:,6:10]
fig, ax = plt.subplots(figsize = (12, 7))
sns.heatmap(M_in, linewidths=0.30, annot=True,cmap="Blues")
plt.title('Changes in voting preferences between 2020 - 2019', fontweight="bold", fontsize=20)
plt.xlabel('Parties 2020', fontsize=14)
plt.ylabel('Parties 2019', fontsize=14)

"""<div dir="rtl">שאלות 7 ו8.<br>
 כדי לראות מעברים בין מפלגות אנו בונים מטריצת המעבר של קולות בין בחירות לכנסת ה 22 לבין בחירות לכנסת ה 23. כלומר בין שנים 2019 לבין 2020.  כדי לקבל תמונה יותר ברורה ניתן לבחור רק במפלגה ימינה ועוד 2 מפלגות. 
 <br>
כשאנו מסתכלים על מעברים ממפלגה זאת, קל לראות שמפלגה מספיק יציבה מבחינת מעברים מפני שהסתברות הכי גבוהה היא 0.24. זה הסתרברות למעבר למפלגת הליכוד. אחר כך  ניתן לראות הסברות 0.21 – הסתברות שאנשים יצביעו לאותה מפלגה. מספר הזה נראה קטון מאוד אם אנו מסתכלים בטבלה גדולה אך הוא סביר אם נסתכל על מפלגות דומות לה. שאר המספרים קטנים מאוד ולכן זניחים. 
<br><br>

. כשאנו מסתכלים על מעברים למפלגת ימינה – ניתן לראות שבהסתברות 0.4 (מספר גבוה) מצביעים ממפלגה עוצמה יהדות יעברו לימינה. באותו זמן רק בהסתברות 0.21 למפלגה יצביעו אותם אנשים כמו במועד הקודם.
 </div>
"""

df_2019b_raw_ballot['אמת']=df_2019b_raw_ballot['אמת']+df_2019b_raw_ballot['מרצ']

df_2019_ballot = df_2019b_raw_ballot[['סמל ישוב', 'קלפי', 'בזב', 'כשרים', 'מחל', 'פה', 'ודעם', 'שס', 'ג', 'ל', 'אמת', 'טב', 'נץ']].reset_index()
df_2020_ballot = df_2020_raw_ballot[['סמל ישוב', 'קלפי', 'בזב', 'כשרים', 'מחל', 'פה', 'ודעם', 'שס', 'ג', 'ל', 'אמת', 'טב', 'נץ']].reset_index()

ballot_match = df_2019_ballot.set_index(['קלפי', 'סמל ישוב']).join(df_2020_ballot.set_index(['קלפי', 'סמל ישוב']), lsuffix = '-2019').dropna()

ballot_2020 = ballot_match[ballot_match.columns[12:25]]
ballot_2019 = ballot_match[ballot_match.columns[0:12]]
ballot_2019.columns = ballot_2020.columns

parties_2019 = ballot_2019[['מחל','פה','ודעם','שס','ג','ל','אמת','טב','נץ']]
parties_2019 = parties_2019.div(parties_2019.sum(axis = 1), axis = 0)
parties_2020 = ballot_2020[['מחל','פה','ודעם','שס','ג','ל','אמת','טב','נץ']]
parties_2020 = parties_2020.div(parties_2020.sum(axis = 1), axis= 0)
top_10_a = ((parties_2019-parties_2020)**2).sum(axis=1).nlargest(10).index
ballot_2019.loc[:,'אחוז הצבעה'] = ballot_2019['כשרים']/ballot_2019['בזב']
ballot_2020.loc[:,'אחוז הצבעה'] = ballot_2020['כשרים']/ballot_2020['בזב']
turnout = (ballot_2019['אחוז הצבעה'] + ballot_2020['אחוז הצבעה'])/2 
top_10_b= turnout[turnout < 10].nlargest(10).index 
diff_turnout = abs(ballot_2019['אחוז הצבעה'] - ballot_2020['אחוז הצבעה']) 
top_10_c= diff_turnout[diff_turnout < 10].nlargest(10).index

def bar_plots(parties_2019, parties_2020, tops):
  fig, ax = plt.subplots(2, 5, figsize=(20,10))
  width = 0.3  # set column width 
  votes_2019 = parties_2019.loc[tops]  # total votes for each party
  votes_2020 = parties_2020.loc[tops]

  names = votes_2020.keys()
  rev_names = [name[::-1] for name in list(names)]
  n = 9 

  for ballot in range(10):
    bar_2019 = ax[ballot//5, ballot%5].bar(np.arange(n), list(votes_2019.iloc[ballot]), width, color='gold')
    bar_2020 = ax[ballot//5, ballot%5].bar(np.arange(n)+width, list(votes_2020.iloc[ballot]), width, color='purple')
    ax[ballot//5, ballot%5].set_title(ballot_2019.loc[tops[ballot], 'שם ישוב'][::-1] + " " + str(tops[ballot][0]) , fontsize=14)

    ax[ballot//5, ballot%5].set_xticks(np.arange(n))
    ax[ballot//5, ballot%5].set_xticklabels(rev_names)
    ax[ballot//5, ballot%5].legend((bar_2020[0], bar_2019[0]),
                                   ('2020: ' + 'םירשכ- '+ str(ballot_2020.loc[tops[ballot], 'כשרים']) +
                                     ', בזב- ' + str(ballot_2020.loc[tops[ballot], 'בזב']), 
                                    '2019: ' + 'םירשכ- '+ str(ballot_2019.loc[tops[ballot], 'כשרים']) +
                                     ', בזב- ' + str(ballot_2019.loc[tops[ballot], 'בזב'])))
    
  for ax in ax.flat:
    ax.set_ylabel('Votes percent')
    ax.set_xlabel('Parties Names')
    
  plt.tight_layout()
  plt.show()

bar_plots(parties_2019, parties_2020, top_10_a)

"""<div dir="rtl"> 
שאלה 9. 
<br>
בחלק זה של הניתוח נרצה למצוא קלפיות חשודות על פי קריטריונים שונים ולנסות להבין כיצד הקלפיות שנמצאו יכולות להשפיע על ההצבעה למפלגה.
<br>
קריטריון  ראשון שבחרנו כדי למצוא קלפיות חשודות הוא על פי סכום המרחקים הריבועיים בין שכיחויות ההצבעה למפלגות הגדולות בבחירות בשנים 2020 ו2019.
<br>
ניתן לראות שבכסרא – סמיע אחוז הצבעה למפלגת ימימה הוא די נמוך למרות הקלפיות שונות בכפר קאסם. למרות שבכפר הזה מפלגת ליכוד זכה באחוזים, ימינה גם קיבלה מספיק קולות ביחס לשאר מפלגות. 
</div>
"""

bar_plots(parties_2019, parties_2020, top_10_b)

"""<div dir="rtl"> 
קריטריון שני שעל פיו החלטנו למצוא קלפיות חשודות הוא קלפיות שבהן אחוז ההצבעה-  כלומר ניתן לקחת ממוצע עבור 2 בחירות - היה מקסימלי.
<br>
לפי קריטריון שני אנו ראים כי קיבלנו ישובים יהודיים כנגד קריטריון ראשון. ניתן לראות כי מפלגת ימינה חזרה בערים כמו עמיחי ותלם. בהן היא קיבלה רוב הקולות. אנו גם רואים ערים קררית גת, חתור גלילית ויסודות שבהן רוב קיבלה מפלגת יהדות התורה. וגם בקלפי אחד בחיפה למרות שחיפה כעיר מציגה התפלגות ההצבעה כמדינה כולה.
</div>
"""

bar_plots(parties_2019, parties_2020, top_10_c)

"""<div dir="rtl"> 
קריטריון אחרון הוא על פי קלפיות שבהן חל השינוי הרב ביותר באחוז  ההצבעה הכללי בין 2 מערכות הבחירות.
<br>
ניתן לראות שגם על פי קריטריון זה וגם על פי הקריטריון הראשון, כלפי 9 מיישוב כסרא-סמיע מופיע כחשוד. ניתן לראות שבאופן קיצוני מחל קיבלו אחוז גדול מאוד בבחירות 2020 ביחס לספטמבר 2019, וזה בא על חשבון אחוזי הקולות של מפלגתינו. יכול להיות שהיו שם פעילי הליכוד והם העלימו קולות מהמפלגות הקטנות יותר, כדי שלא ישימו לב.
<br>
בנוסף לכך, ניתן לראות שבקלפי 11 ביישוב עראבה ובקלפי 34 ביישוב שפרעם היו 0 קולות כשרים בבחירות 2019 ביחס לבמות הקשרים בשנת 2020. 

</div>
"""